rd_("AlMain GUI application struct.DkCreates a new <code>Resolution</code> instance with specified width and \xe2\x80\xa6ChCreates a new engine instance from configuration and \xe2\x80\xa6CiCreates a new GameEngine using provided config and scene.CgCreates a new configuration instance with the given \xe2\x80\xa6DfCreates a new <code>EngineConfig</code> with the specified resolution.DiCreates a new <code>Scene</code> instance with provided game objects, \xe2\x80\xa6CmConstructs a new game object from components, script, and \xe2\x80\xa6BgConstruct a new instance of the script.DhCreates a new <code>Sprite</code> component with given image, shadow \xe2\x80\xa6DfCreates a new <code>SceneManager</code> with the specified main scene.DjCreates a new <code>Screen</code> attached to the specified window and \xe2\x80\xa6CjConstructs a new App with shared pixel data and window \xe2\x80\xa6BeStarts and runs the engine main loop.B`Runs the game engine event loop.DiPlaceholder run method; main loop handled by <code>winit</code> event \xe2\x80\xa6AiUnique object identifier.CnHolds the pressed state of movement keys (WASD) via atomic \xe2\x80\xa6CeReturns the most recently rendered frame for display.AoReturns the argument unchanged.000000000000000000CmInitializes and collects all renderable sprite objects in \xe2\x80\xa6BaCalls <code>U::from(self)</code>.000000000000000000AiComponent already exists.CjA trait describing entity for passing info about users \xe2\x80\xa6CnRepresents the game scene containing game objects and main \xe2\x80\xa6AlScreen dimensions constants.ClRepresents a game scene containing multiple game objects \xe2\x80\xa6CkTrait defining configuration interface for engine settings.BiTrait defining essential engine behavior.CjOffset used when rendering shadows relative to the sprite.BfDefines an interface for game objects.CeRepresents the screen on which game frames are drawn.CnTrait representing a script that can be attached to a game \xe2\x80\xa6ClA component representing a 2D sprite with image, shadow, \xe2\x80\xa6CiApply the script\xe2\x80\x99s action on the given mutable game \xe2\x80\xa6CnReturns the component as a dynamic Any reference, allowing \xe2\x80\xa6CiDefines configuration traits and structs for the game \xe2\x80\xa6CaMain engine module defining engine traits and \xe2\x80\xa6AjPerforms a rendering pass.CfDelegates rendering to the internal Renderer instance.ClDefines the main application window, input handling, and \xe2\x80\xa6ClA trait describing behavior of a script component in the \xe2\x80\xa6CkRepresents a sprite component that can be attached to a \xe2\x80\xa6BhSprite image associated with the object.ChUpdates the pixel frame with new RGBA color data and \xe2\x80\xa6CiExample function demonstrating app initialization and \xe2\x80\xa6CbCalled when the application is resumed or started.BgA 3D position with optional relativity.BcManages the main rendering process.CdError related to unique identifier (UID) management.ChRepresents a position in 3D space within the game world.BiPosition of the object in the game world.CjCore rendering module responsible for composing frames \xe2\x80\xa6BcCoordinates of the top-left corner.CbTrait that defines behavior of any game component.CiRepresents a rectangular area defined by top-left and \xe2\x80\xa6BgCoordinates of the bottom-right corner.ClHelper utilities for creating game objects, initializing \xe2\x80\xa6BkConcrete implementation of the game engine.CiThe primary game object structure holding components, \xe2\x80\xa6BjRepresents an entity that can be rendered.AmRepresents screen resolution.CnA trait describing a game object component entity, such as \xe2\x80\xa6DkInitializes a <code>Scene</code> from a slice of background objects and \xe2\x80\xa6CeRuns the associated script action on the game object.BhRoot module for the game engine project.BlOperation could not be applied on component.ChDefines the core game object entity and its behavior \xe2\x80\xa6DhCreates and initializes a <code>GameEngine</code> instance using the \xe2\x80\xa6BgThe main game object within this scene.CdConcrete implementation of the engine configuration.AkInvalid index was provided.CkManages active scene and provides scene-related operations.CcCatch-all variant for unknown or unexpected errors.AjAn unknown error occurred.CbReturns a reference to the currently active scene.CfAdds a relative (x, y) offset to the current position.BiGets a reference to the current position.CcThe visible rectangle area of the sprite on screen.ChHandles window events such as close requests, redraw \xe2\x80\xa6BoEnum identifying types of components supported.AhPosition-related errors.CjAdds a component, performing sprite-specific checks if \xe2\x80\xa6CmManages different scenes within the game engine, allowing \xe2\x80\xa6CkRepresents an error originating from a component operation.BoErrors that can occur when handling components.AlGets the current resolution.BiReturns a copy of the current resolution.BeSets the resolution width and height.0BnErrors that can arise at the GameObject level.CkRepresents a simplified interface to a game object with \xe2\x80\xa6BhUpdates the position of the game object.CnRemoves the component at the given index, or returns error \xe2\x80\xa6CbSets the currently active scene within the engine.CgSets the active scene inside the renderer\xe2\x80\x99s scene \xe2\x80\xa6BbOpacity (alpha) value for shadows.CmInitializes and retrieves all renderable objects from the \xe2\x80\xa6DjConverts a slice of <code>ObjectWithImage</code> entries into a vector \xe2\x80\xa6BjReturns the component\xe2\x80\x99s type identifier.DhCreates an <code>ObjectWithImage</code> instance from image path and \xe2\x80\xa6BnIndicates whether the component casts shadows.BfReturns the sprite image if available.BkDefault RGBA color for the background fill.BhReturns the sprite offset if applicable.")